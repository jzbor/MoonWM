#!/bin/sh

TEMPORARYDIR="${TMPDIR:-/tmp}/moonwm/${USER:-default}"
[ -d "$TEMPORARYDIR" ] || mkdir -vp "$TEMPORARYDIR"
LOCK_TMP_FILE="$TEMPORARYDIR/lockfile.png"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/moonwm"
CONFIG_FILE="$CONFIG_DIR/config.env"
MODMAP_FILE="$CONFIG_DIR/modmap"
WALLPAPER_FILE="$CONFIG_DIR/background"
WALLPAPER="${MOONWM_WALLPAPER:-$WALLPAPER_FILE}"
QUICK_NOTIFICATION_TIMEOUT="1500"
INTERNAL_DISPLAY_PATTERN='LVDS_*[0-9]\|Lvds_*[0-9]\|lvds_*[0-9]\|eDP_*[0-9]'

autostart () {
    # Configure X
    moonctl wmname LG3D
    load_wallpaper
    setup_keyboard

    # Other daemons
    killall -9 sxhkd 2> /dev/null; run sxhkd sxhkd

    if [ -d "${XDG_CACHE_HOME:-$HOME/.cache}/moonwm-xdg-xmenu" ]; then
        (sleep 120; nice moonwm-xdg-xmenu -e > /dev/null 2>&1) &
    else
        nice moonwm-xdg-xmenu -f > /dev/null 2>&1 &
    fi

    autostart_async &
}

autostart_async () {
    # Load xmenu defaults
    load_xmenu_defaults

    # Daemons that automatically check for running instances
    run /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 \
        /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
    env_def_true MOONWM_NOTIFYD && run "$(get_default_notification_daemon)" "$(get_default_notification_daemon)"
    run kdeconnect-indicator kdeconnect-indicator
    run nm-applet nm-applet
    run xfce4-power-manager xfce4-power-manager

    # Applets & tray icons
    (killall -9 /usr/lib/geoclue-2.0/demos/agent; /usr/lib/geoclue-2.0/demos/agent & sleep 5;
    run redshift "killall -9 redshift; redshift -x; redshift -l geoclue2") &

    pidof touchegg > /dev/null || rm ~/.config/touchegg/.touchegg.lock
    run touchegg "touchegg --daemon $TOUCHEGG_THRESHOLDS"
    run touchegg touchegg

    # Auto setup displays
    if [ -x ~/.screenlayout/default.sh ]; then
        ~/.screenlayout/default.sh
        load_wallpaper
    elif [ -x ~/.screenlayout/autoload.sh ]; then
        ~/.screenlayout/autoload.sh
        load_wallpaper
    else
        monitors extend quiet
    fi


    # Run nextcloud last so polkit is up
    run nextcloud "nextcloud --background"

    # Start compositor
    sleep 2
    if env_def_true MOONWM_PICOM; then
        if env_def_false MOONWM_PICOMEXP; then
            run picom "killall -9 picom; picom --experimental-backends"
        else
            run picom "killall -9 picom; picom"
        fi
    fi

}

brightness () {
    if [ "$1" -lt 0 ]; then
        light -U "$(echo "$1" | sed 's/-//')"
    elif [ "$1" -gt 0 ]; then
        light -A "$(echo "$1" | sed 's/-//')"
    fi
    notify-send -t "$QUICK_NOTIFICATION_TIMEOUT" -a Brightness \
        -i "notification-display-brightness" \
        -h string:x-canonical-private-synchronous:moonwm-brightness \
        "Set brightness to $(light | sed 's/\..*//g')%"
}

default_dmenu_run () {
    dmenu_path | \
    	$0 dmenu "$@" | \
        sh
}

dmenu_drun () {
    list="$(moonwm-xdg-xmenu -at | sort)"
    selected="$(echo "$list" | cut -f1 | $0 dmenu -i "$@")" \
    	&& if echo "$list" | grep -F "$selected" > /dev/null; then
           eval "$(echo "$list" | grep -F "$selected" | head -n 1 | cut -f2)"
       else
           eval "$selected"
       fi
}

dmenu_wrapper () {
    if env_def_true MOONWM_THEMEDDMENU; then
        exec dmenu -i -nb '#1d2021' -nf '#ebdbb2' -sb '#fb4934' -sf '#1d2021' -fn 'FiraCode Nerd Font:size=10' "$@"
    else
       	exec dmenu "$@"
   	fi
}

env_is_set () {
    env | grep "^$1=" > /dev/null
}

# for settings that default to false
env_def_false () {
    env_is_set "$1" && [ "$(eval echo "\$$1")" = "1" ]
}

# for settings that default to true
env_def_true () {
    (! env_is_set "$1") || [ "$(eval echo "\$$1")" = "1" ]
}

generate_lock_file () {
    resolution="$(get_primary_resolution)"
    if ! [ "$(file "$LOCK_TMP_FILE" | cut -f11 -d',' | sed 's/\s//g')" = "$resolution" ]; then
        nice -n 19 convert -blur 0x8 -resize "$resolution"^ -crop "$resolution"+0+0 "$WALLPAPER" "$LOCK_TMP_FILE"
    fi
}

get_default_browser () {
    if command -v firefox > /dev/null 2>&1; then
        echo firefox
    elif command -v chromium > /dev/null 2>&1; then
        echo chromium
    elif command -v chrome > /dev/null 2>&1; then
        echo chrome
    else
        return 1
    fi
}

get_default_dmenucmd () {
    if command -v rofi > /dev/null 2>&1; then
        echo rofi -show drun
    elif command -v dmenu_run > /dev/null 2>&1; then
        echo moonwm-util drun
    else
        return 1
    fi
}

get_default_notification_daemon () {
    if command -v /usr/lib/mate-notification-daemon/mate-notification-daemon > /dev/null; then
        echo /usr/lib/mate-notification-daemon/mate-notification-daemon
    elif command -v /usr/lib/xfce4/notifyd/xfce4-notifyd > /dev/null; then
        echo /usr/lib/xfce4/notifyd/xfce4-notifyd
    elif command -v dunst > /dev/null 2>&1; then
        echo dunst
    elif command -v /usr/lib/notification-daemon-1.0/notification-daemon > /dev/null 2>&1; then
        echo /usr/lib/notification-daemon-1.0/notification-daemon
    elif command -v /usr/lib/notify-osd/notify-osd > /dev/null; then
        echo /usr/lib/notify-osd/notify-osd
    else
        return 1
    fi
}

get_default_terminal () {
    if command -v gnome-terminal > /dev/null 2>&1; then
        echo gnome-terminal
    elif command -v xfce4-terminal > /dev/null 2>&1; then
        echo xfce4-terminal
    elif command -v alacritty > /dev/null 2>&1; then
        echo alacritty
    elif command -v uxterm > /dev/null 2>&1; then
        echo uxterm
    else
        return 1
    fi
}

get_primary_resolution () {
    xrandr | grep '\*' | sed 's/^\s*\([0-9]*x[0-9]*\).*/\1/g' | head -n 1
}

load_env_defaults () {
    if (! env_is_set TERMINAL) && get_default_terminal; then
        export TERMINAL="$(get_default_terminal)"
        export TERM="xterm-256color"
    fi
    if (! env_is_set BROWSER) && get_default_browser; then
        export BROWSER="$(get_default_browser)"
    fi
    if ! env_is_set DMENUCMD; then
        export DMENUCMD="$(get_default_dmenucmd)"
    fi
    if ! env_is_set MOONWM_STATUSCMD; then
        export MOONWM_STATUSCMD="moonwm-status"
    fi
}

load_xmenu_value () {
    if ! xrdb_has "$1"; then
        temp="$(xrdb_get "$2")"
        xrdb_set "$1" "${temp:-$3}"
    fi
}

load_xmenu_defaults () {
    env_def_true MOONWM_THEMEDXMENU || return
    load_xmenu_value '\*background'     'moonwm.focusedTitleBg'     '#1d2021'
    load_xmenu_value '\*foreground'     'moonwm.focusedTitleFg'     '#ebdbb2'
    load_xmenu_value xmenu.border       'moonwm.unfocusedBorder'    '#282828'
    load_xmenu_value xmenu.foreground   'moonwm.focusedTitleFg'     '#ebdbb2'
    load_xmenu_value xmenu.background   'moonwm.focusedTitleBg'     '#1d2021'
    load_xmenu_value xmenu.selforeground 'moonwm.focusedTitleBg'    '#1d2021'
    load_xmenu_value xmenu.selbackground 'moonwm.focusedTitleFg'    '#ebdbb2'
    load_xmenu_value xmenu.font         ''          'FiraCode Nerd Font:size=9,monospace:size=9'
    load_xmenu_value xmenu.borderWidth  ''                          2
    load_xmenu_value xmenu.separator    'moonwm.focusedTitleFg'     '#ebdbb2'
}

launch () {
    # Load user configuration
    if [ -f "$CONFIG_FILE" ]; then
        set -o allexport
        . "$CONFIG_FILE"
        set +o allexport
    fi

    # Load default values for env variables
    load_env_defaults

    xrdb -merge ~/.Xresources

    exec moonwm
}

launch_valgrind () {
    logfile="${XDG_DATA_HOME:-$USER/.local/share}/moonwm/valgrind.log"
    options="--leak-check=full --show-leak-kinds=all --track-origins=yes -v"

    # Load user configuration
    if [ -f "$CONFIG_FILE" ]; then
        set -o allexport
        . "$CONFIG_FILE"
        set +o allexport
    fi

    # Load default values for env variables
    load_env_defaults

    xrdb -merge ~/.Xresources

    [ -f "$logfile" ] && mv "$logfile" "$logfile.bak"

    exec valgrind $options moonwm > "$logfile" 2>&1
}

layouts () {
    layout="$HOME/.screenlayout/$(ls -1u ~/.screenlayout/ | $0 dmenu -p "Layouts: ")"
    if [ -x "$layout" ]; then
        sh -c "$layout"
        setup_keyboard
        load_wallpaper
    fi
}

load_wallpaper () {
    [ -f "$WALLPAPER" ] \
        && xwallpaper --zoom "$WALLPAPER" 2> /dev/null &
    [ -f "$LOCK_TMP_FILE" ] || generate_lock_file &
}

lock () {
    if pidof lightdm > /dev/null; then
        dm-tool lock
    else
        [ -f "$LOCK_TMP_FILE" ] || generate_lock_file
        i3lock -c 1d2021 -i "$LOCK_TMP_FILE"
    fi
}

monitors () {
    connected="$(xrandr | grep " connected " | cut -d " " -f 1)"
    disconnected="$(xrandr | grep " disconnected " | cut -d " " -f 1)"
    internal="$(echo "$connected" | grep "$INTERNAL_DISPLAY_PATTERN")"
    external="$(echo "$connected" | grep -v "$INTERNAL_DISPLAY_PATTERN")"
    last=""

    case $1 in
        internal)
            if [ -n "$internal" ]; then
                for display in $internal; do
                    if [ -z "$last" ]; then
                        echo "Setting up first display: $display"
                        xrandr --output "$display" --auto --primary
                        last="$display"
                    else
                        echo "Setting up $display next to $last"
                        xrandr --output "$display" --auto --right-of "$last"
                        last="$display"
                    fi
                done
                for display in $external; do
                    echo "Disabling $display"
                    xrandr --output "$display" --off
                done
            else
                echo "No internal display connected"
            fi
            [ "$2" = 'quiet' ] \
                || notify-send -a "MoonWM Monitor Setup" "Enabling only internal displays (if on a laptop)."
            echo internal > "$TEMPORARYDIR/monitormode"
            ;;
        external)
            if [ -n "$external" ]; then
                for display in $external; do
                    if [ -z "$last" ]; then
                        echo "Setting up first display: $display"
                        xrandr --output "$display" --auto --primary
                        last="$display"
                    else
                        echo "Setting up $display next to $last"
                        xrandr --output "$display" --auto --right-of "$last"
                        last="$display"
                    fi
                done
                for display in $internal; do
                    echo "Disabling $display"
                    xrandr --output "$display" --off
                done
            else
                echo "No external display connected"
            fi
            [ "$2" = 'quiet' ] \
                || notify-send -a "MoonWM Monitor Setup" "Enabling only external monitors (if connected)."
            echo external > "$TEMPORARYDIR/monitormode"
            ;;
        extend)
            if  [ -z "$external" ] || grep -v closed /proc/acpi/button/lid/LID*/state > /dev/null 2>&1; then
                for display in $internal; do
                    if [ -z "$last" ]; then
                        echo "Setting up first display: $display"
                        xrandr --output "$display" --auto --primary
                        last="$display"
                    else
                        echo "Setting up $display next to $last"
                        xrandr --output "$display" --auto --right-of "$last"
                        last="$display"
                    fi
                done
            else
                for display in $internal; do
                    xrandr --output "$display" --off
                    echo "Disabling internal display: $display (lid closed)"
                done
            fi
            for display in $external; do
                if [ -z "$last" ]; then
                    echo "Setting up first display: $display"
                    xrandr --output "$display" --auto --primary
                    last="$display"
                else
                    echo "Setting up $display next to $last"
                    xrandr --output "$display" --auto --right-of "$last"
                    last="$display"
                fi
            done
            [ "$2" = 'quiet' ] \
                || notify-send -a "MoonWM Monitor Setup" "Arranging monitors from left to right."
            echo extend > "$TEMPORARYDIR/monitormode"
            ;;
        mirror)
            if  [ -z "$external" ] || grep -v closed /proc/acpi/button/lid/LID*/state > /dev/null 2>&1; then
                for display in $internal; do
                    if [ -z "$last" ]; then
                        echo "Setting up first display: $display"
                        xrandr --output "$display" --auto --primary
                        res="$(xrandr | grep "^$display " | cut -d' ' -f4 |cut -d'+' -f1)"
                        last="$display"
                    else
                        echo "Setting up $display mirroring $last"
                        xrandr --output "$display" --mode "$res" --same-as "$last" \
                            || xrandr --output "$display" --same-as "$last"
                        last="$display"
                    fi
                done
            else
                for display in $internal; do
                    xrandr --output "$display" --off
                    echo "Disabling internal display: $display (lid closed)"
                done
            fi
            for display in $external; do
                if [ -z "$last" ]; then
                    echo "Setting up first display: $display"
                    xrandr --output "$display" --auto --primary
                    last="$display"
                else
                    echo "Setting up $display mirroring $last"
                    xrandr --output "$display" --mode "$res" --same-as "$last" \
                        || xrandr --output "$display" --same-as "$last"
                    last="$display"
                fi
            done
            [ "$2" = 'quiet' ] \
                || notify-send -a "MoonWM Monitor Setup" "Setting monitors to mirror mode."
            echo mirror > "$TEMPORARYDIR/monitormode"
            ;;
        toggle | cycle)
            if [ -f "$TEMPORARYDIR/monitormode" ]; then
                currentmode="$(cat "$TEMPORARYDIR/monitormode")"
                case $currentmode in
                    internal) monitors external;;
                    external) monitors extend;;
                    extend) monitors mirror;;
                    mirror) monitors internal;;
                    *) monitors internal;;
                esac
            else
                echo "Unable to access monitor state file ($TEMPORARYDIR/monitormode) - falling back to 'extend'" > /dev/stderr
                monitors extend
            fi
            return
            ;;
        *)
            echo "Unknown monitor mode: $1"
            ;;
    esac

    # Preventing initialization of VIRTUAL1 on undock
    for display in $disconnected; do
        xrandr --output "$display" --off
    done

    load_wallpaper
}

run () {
    # 1: executable to test for
    # 2: command to execute
    # 3: '1' to run synchronously
    if ( [ -z "$1" ] || command -v "$1" > /dev/null 2>&1 ); then
        if [ "$3" = 1 ]; then
            echo "$2" | sh
        else
            echo "$2" | sh &
        fi
    fi
}

screenshot () {
    dest="$XDG_PICTURES_DIR"
    [ -d "$dest" ] || dest="$HOME/Pictures"
    [ -d "$dest" ] || dest="$HOME/"
    dest="$dest/Screenshots/"
    [ -d "$dest" ] || mkdir -p "$dest"

    filename="$(date +'Screenshot_%Y-%m-%d_%H-%M-%S.png')"
    success="-1"

    case $1 in
        "")
            scrot -s -f "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        screen)
            scrot "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        focused)
            scrot -u "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
    esac

    if [ "$success" = 0 ]; then
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/screen-capture.oga > /dev/null 2>&1 &
        if command -v dunstify > /dev/null 2>&1; then
            dunstify -a Screenshot -i "$dest/$filename" "Successfully taken screenshot" "file://$dest/$filename" \
                --action "$FILEMANAGER $dest,open" | sh 2> /dev/null
        else
            notify-send -a Screenshot -i "$dest/$filename" "Successfully taken screenshot" "file://$dest/$filename"
        fi
    fi
}

set_wallpaper () {
    if [ -z "$1" ]; then
        echo "No file specified." > /dev/stderr
        return 1
    elif ! [ -f "$1" ]; then
        echo "$1 is not a file." > /dev/stderr
        return 1
    elif env_is_set MOONWM_WALLPAPER; then
        echo "You have \$MOONWM_WALLPAPER set. You must remove it before using this script."
        notify-send -a "MoonWM - Wallpaper" "You have \$MOONWM_WALLPAPER set. You must remove it before using this script."
        return 1
    else
        [ -d "$CONFIG_DIR" ] || mkdir -vp "$CONFIG_DIR"
        cp -f "$1" "$WALLPAPER_FILE"
        load_wallpaper
        echo "Successfully set new wallpaper."
        notify-send -a "MoonWM - Wallpaper" -i "$(realpath "$WALLPAPER_FILE")" "Successfully set new wallpaper."
    fi
}

setup_keyboard () {
    [ -n "$MOONWM_KEYMAP" ] && setxkbmap $MOONWM_KEYMAP
    [ -f "$MODMAP_FILE" ] && \
        xmodmap - < "$MODMAP_FILE"
    return 0
}

volume () {
    if [ "$1" = "mute" ]; then
        pamixer -t
        volume_notification mute
    elif [ "$1" -lt 0 ]; then
        pamixer "$(volume_boost)" -d "$(echo "$1" | sed 's/-//')"
        volume_notification
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    elif [ "$1" -gt 0 ]; then
        pamixer "$(volume_boost)" -i "$(echo "$1" | sed 's/-//')"
        volume_notification
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    fi
    [ -n "$MOONWM_STATUSCMD" ] && $MOONWM_STATUSCMD update
}

volume_boost () {
    if env_def_false "MOONWM_BOOST_AUDIO"; then
        printf "%s" "--allow-boost"
    fi
}

volume_notification () {
    if pidof xfce4-notifyd > /dev/null; then
        return
    fi

    muted="$(pamixer --get-mute)"
    if [ "$1" = mute ] && [ "$muted" = "true" ]; then
        notify-send -t "$QUICK_NOTIFICATION_TIMEOUT" -a Volume -i "notification-audio-volume-muted" \
            -h string:x-canonical-private-synchronous:moonwm-volume \
            "Muted"
    else
        level="$(pamixer --get-volume)"
        if [ "$level" -lt 25 ]; then
            icon="notification-audio-volume-off"
        elif [ "$level" -lt 50 ]; then
            icon="notification-audio-volume-low"
        elif [ "$level" -lt 75 ]; then
            icon="notification-audio-volume-medium"
        else
            icon="notification-audio-volume-high"
        fi

        if [ "$1" = mute ] && [ "$muted" = "false" ]; then
            notify-send -t "$QUICK_NOTIFICATION_TIMEOUT" -a Volume -i "$icon" \
                -h string:x-canonical-private-synchronous:moonwm-volume \
                "Unmuted"
        elif [ "$muted" = "false" ]; then
            notify-send -t "$QUICK_NOTIFICATION_TIMEOUT" -a Volume -i "$icon" \
                -h string:x-canonical-private-synchronous:moonwm-volume \
                "$(pamixer --get-volume-human)"
        fi
    fi
}

xrdb_get () {
    xrdb -query -all | grep "^$1": | sed 's/.*#/#/g' | sort | head -n 1
}

xrdb_has () {
    xrdb -query -all | grep "^$1": > /dev/null
}

xrdb_set () {
    echo "$1: $2" | xrdb -merge
}

xrdb_refresh () {
    moonctl xrdb
    load_xmenu_defaults
}

helptext="
moonwm-util [-h] [-r] command

options:
    -h    Prints this help text
    -r    Check if MoonWM is running first

commands:
    brightness     Change display brightness (e.g. moonwm-util brightness -5)
    dmenu          Themed wrapper for dmenu (for use in scripts etc.)
    drun           Default application launcher
    help           Prints this help text
    launch         Wrapper to launch MoonWM properly (used in moonwm.desktop, can be used in .xinitrc)
    lock           Locks the screen
    monitors       Setup monitors (modes: 'internal', 'external', 'extend', 'mirror')
    run            Launcher with all exectutables in \$PATH
    screenlayouts  Select monitor configuration via dmenu
    screensetup    Calls 'monitors extend' (deprecated)
    screenshot     Take a screenshot (optionally takes 'screen' or 'focused' as arguments)
    setwallpaper   Set the wallpaper
    setup-keyboard Initialize keyboard layout
    start          Launch autostart applications
    volume         Change output volume (e.g. moonwm-util volume -5 or moonwm-util volume mute)
    xrdb           Refresh xrdb values of moonwm and utils
"

while getopts "hr" arg; do
    case "$arg" in
        h)
            echo "$helptext"
            exit
            ;;
        r)
            if ! pidof moonwm > /dev/null; then
                echo "MoonWM is not running."
                exit 1
            fi
            shift
            ;;
    esac
done


case $1 in
    brightness) brightness "$2";;
    dmenu) shift; dmenu_wrapper "$@";;
    drun) shift; dmenu_drun "$@";;
    help) echo "$helptext"; exit;;
    launch) launch;;
    launch-valgrind) launch_valgrind;;
    lock) lock;;
    monitors) monitors "$2" ;;
    run) shift; default_dmenu_run "$@";;
    screenlayouts) layouts;;
    screensetup) monitors extend;;
    screenshot) screenshot "$2";;
    setup-keyboard) setup_keyboard;;
    setwallpaper) set_wallpaper "$2" ;;
    start) autostart;;
    volume) volume "$2";;
    xrdb) xrdb_refresh ;;
    *) printf "Unknown operation '$1'.\nTry 'moonwm-util -h' for more information.\n"; exit 1;;
esac

